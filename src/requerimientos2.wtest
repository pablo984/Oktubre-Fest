import cervezasYJarras.*
import personas.*
import carpas.*

test "Requerimientos - Segunda parte" {
	/*Creación de las instancias de Cervezas Rubia, Negra y Roja*/
	const corona = new CervezaRubia(lupuloPorLitro=5, paisDeOrigen="Mexico", graduacionAlcoholica=9)
	
	const guinness = new CervezaNegra()
	guinness.lupuloPorLitro(4)
	guinness.calcularGraduacion()
	guinness.paisDeOrigen("Irlanda")	
	
	const hofbrau = new CervezaRoja()
	hofbrau.lupuloPorLitro(5)
	hofbrau.calcularGraduacion()
	hofbrau.paisDeOrigen("Alemania")
	
	const stellaArtois = new CervezaRubia(lupuloPorLitro=5, paisDeOrigen="Belgica", graduacionAlcoholica=10)
	
	const pilsner = new CervezaNegra()
	pilsner.lupuloPorLitro(3)
	pilsner.calcularGraduacion()
	pilsner.paisDeOrigen("Checoslovaquia")
	
	const paulaner = new CervezaRoja() 
	paulaner.lupuloPorLitro(3)
	paulaner.calcularGraduacion()
	paulaner.paisDeOrigen("Alemania")
	
	/*Test sobre la graduacion alcohólica de las cervezas negra y roja*/
	assert.equals(8, guinness.graduacionAlcoholica())
	assert.equals(12.5, hofbrau.graduacionAlcoholica())
	assert.equals(6, pilsner.graduacionAlcoholica())
	assert.equals(7.5, paulaner.graduacionAlcoholica())
	
	/*Creacion de las instancias de Jarra*/
	const jarraCorona = new Jarra()
	jarraCorona.marca(corona)
	jarraCorona.litros(1) //Se le agregó el valor de los litros porque en el punto 6 se utiliza esta jarra
	
	const jarraGuinness = new Jarra()
	jarraGuinness.marca(guinness)
	
	const jarraHofbrau = new Jarra()
	jarraHofbrau.marca(hofbrau)
	
	const jarraStellaArtois = new Jarra()
	jarraStellaArtois.marca(stellaArtois)
	
	const jarraPilsner = new Jarra()
	jarraPilsner.marca(pilsner)
	const jarraPilsner2 = new Jarra()
	jarraPilsner2.marca(pilsner)
		
	const jarraPaulaner = new Jarra() 
	jarraPaulaner.marca(paulaner)
	
	/*Creación de las instancias de Persona*/
	const victor = new Belga(peso=85, leGustaLaMusicaTradicional=true, nivelDeAguante=7, nacionalidad="Belgica")
	const ludmila = new Checo(peso=57, leGustaLaMusicaTradicional=false, nivelDeAguante=6, nacionalidad="Checoslovaquia")
	const adolph = new Aleman(peso=75, leGustaLaMusicaTradicional=true, nivelDeAguante=8, nacionalidad="Alemania")
	const carlos = new Persona(peso=80, leGustaLaMusicaTradicional=true, nivelDeAguante=12, nacionalidad="Mexico")
	const marie = new Belga(peso=60, leGustaLaMusicaTradicional=true, nivelDeAguante=5, nacionalidad="Belgica")
	const herman = new Aleman(peso=105, leGustaLaMusicaTradicional=false, nivelDeAguante=15, nacionalidad="Alemania")
	const pablo = new Persona(peso=64, leGustaLaMusicaTradicional=false, nivelDeAguante=8, nacionalidad="Argentina")
	const laura = new Persona(peso=60, leGustaLaMusicaTradicional=false, nivelDeAguante=4, nacionalidad="Checoslovaquia")
	const mauro = new Persona(peso=75, leGustaLaMusicaTradicional=false, nivelDeAguante=6, nacionalidad="Argentina")
	
	/*Creación de las instancias de Carpa*/
	const carpaCorona = new Carpa()
	carpaCorona.limiteDeGente(4)
	carpaCorona.tieneBandaMusical(true)
	carpaCorona.marcaSponsor(corona)
		
	const carpaGuinness = new Carpa()
	carpaGuinness.limiteDeGente(2)
	carpaGuinness.tieneBandaMusical(false)
	carpaGuinness.marcaSponsor(guinness)
		
	const carpaHofbrau = new Carpa()
	carpaHofbrau.limiteDeGente(5)
	carpaHofbrau.tieneBandaMusical(true)
	carpaHofbrau.marcaSponsor(hofbrau)
		
	const carpaStellaArtois =new Carpa()
	carpaStellaArtois.limiteDeGente(3)
	carpaStellaArtois.tieneBandaMusical(false)
	carpaStellaArtois.marcaSponsor(stellaArtois)
	
	const carpaPilsner = new Carpa()
	carpaPilsner.limiteDeGente(3)
	carpaPilsner.tieneBandaMusical(false)
	carpaPilsner.marcaSponsor(pilsner)
		
	const carpaPaulaner = new Carpa() 
	carpaPaulaner.limiteDeGente(6)
	carpaPaulaner.tieneBandaMusical(true)
	carpaPaulaner.marcaSponsor(paulaner)
		
	/*Test-5 para saber si una persona quiere entrar a una Carpa*/
	assert.that(victor.quiereIngresarA(carpaCorona))
	assert.notThat(victor.quiereIngresarA(carpaGuinness))
	
	assert.that(ludmila.quiereIngresarA(carpaStellaArtois))
	assert.notThat(ludmila.quiereIngresarA(carpaPaulaner))
	
	assert.that(adolph.quiereIngresarA(carpaHofbrau))
	assert.notThat(adolph.quiereIngresarA(carpaPilsner))
	
	assert.that(carlos.quiereIngresarA(carpaPaulaner))
	assert.notThat(carlos.quiereIngresarA(carpaGuinness))
	
	assert.that(marie.quiereIngresarA(carpaHofbrau))
	assert.notThat(marie.quiereIngresarA(carpaPaulaner))
	
	assert.that(herman.quiereIngresarA(carpaGuinness))
	assert.notThat(herman.quiereIngresarA(carpaHofbrau))
	
	/*Test-6 para saber si una Carpa deja ingresar a una Persona*/
	carpaCorona.ingresarPersona(ludmila)
	carpaCorona.ingresarPersona(adolph)
	carpaCorona.ingresarPersona(carlos)	
	assert.that(carpaCorona.dejaIngresarA(victor))
	
	carpaGuinness.ingresarPersona(herman)
	carpaGuinness.ingresarPersona(marie)
	assert.notThat(carpaGuinness.dejaIngresarA(victor)) //No lo dejan pasar porque la carpa está llena
	
	adolph.comprarJarras([jarraCorona, jarraCorona, jarraCorona])
	assert.that(adolph.estaEbria())
	assert.notThat(carpaHofbrau.dejaIngresarA(adolph)) //No lo dejan pasar porque está borracho (tomó antes de entrar)
	
	/*Test-7 para saber si una persona puede entrar a una Carpa y si ésta lo deja entrar*/
	assert.that(victor.puedeIngresarA(carpaCorona))
	assert.notThat(victor.puedeIngresarA(carpaGuinness))
	assert.that(marie.puedeIngresarA(carpaCorona))
	assert.notThat(marie.puedeIngresarA(carpaStellaArtois))
	assert.that(ludmila.puedeIngresarA(carpaStellaArtois))
	assert.notThat(ludmila.puedeIngresarA(carpaGuinness))
	
	/*Test-8 hacer que una persona entre a una carpa y si no puede generar un error*/	
	adolph.ingresarA(carpaHofbrau) //"Acceso denegado" impreso en consola
	
	/*Test-9 hacer que la carpa le sirva una jarra de cerveza a una persona */
	carlos.ingresarA(carpaPaulaner)
	assert.equals([carlos], carpaPaulaner.personasDentro())
	
	carpaPaulaner.venderUnaJarra(jarraPaulaner, 1.5)
	assert.equals([jarraPaulaner], carlos.jarrasCompradas())
	assert.equals(0.1125, carlos.totalDeAlcoholIngerido())
	
	carpaPilsner.venderUnaJarra(jarraPilsner, 1) //"No hay gente adentro para vender una jarra" impreso en consola
	
	/*Test-10 saber cuantos ebrios empedernidos hay dentro de la carpa*/
	pablo.ingresarA(carpaPilsner)
	laura.ingresarA(carpaPilsner)
	mauro.ingresarA(carpaPilsner)
	
	jarraPilsner.litros(0.5)
	jarraPilsner2.litros(1.5)
	
	pablo.comprarJarra(jarraPilsner2)
	laura.comprarJarra(jarraPilsner)
	laura.comprarJarra(jarraPilsner)
	mauro.comprarJarra(jarraPilsner2)
	mauro.comprarJarra(jarraPilsner2)
	mauro.comprarJarra(jarraPilsner2)
	pablo.comprarJarra(jarraPilsner2)
	pablo.comprarJarra(jarraPilsner2)
	
	assert.equals(2, carpaPilsner.cantidadDeEbriosEmpedernidos())
	
	/*Test-11 saber si una persona es patriota al saber si todas las jarras que compró son de su país*/
	assert.that(laura.esPatriota())
	assert.notThat(pablo.esPatriota())
	assert.notThat(mauro.esPatriota())
	
	
	
	
	

}